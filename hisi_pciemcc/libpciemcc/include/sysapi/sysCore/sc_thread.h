/***********************************************************************
* Copyright (c) 2016, HzGosun Co.,Ltd. All rights reserved.
*
* Description: sc_thread.h 
* Revisions  : Created on 2017-06-13
* Author: xu_longfei
*
************************************************************************/

#ifndef __SC_THREAD_H__
#define __SC_THREAD_H__



#ifdef __cplusplus
extern "C" {
#endif


/* ========================================================================== */
/*                           宏和类型定义区                                   */
/* ========================================================================== */

/* 使用默认大小的堆栈 */
#define SC_THR_STACK_SIZE_DEFAULT 0


/*
* 调度策略枚举定义，调度策略只对linux用户态和内核态线程有效，
*/
typedef enum
{
    SC_SCHED_OTHER  = 0,  /* 分时调度策略 */
    SC_SCHED_FIFO,        /* 实时调度策略，先到先服务。*/
    SC_SCHED_RR,          /* 实时调度策略，时间片轮转。*/
    SC_SCHED_NUM,
} SC_thrSchedPolicy;


/* 线程句柄，所有操作均基于此句柄。*/
typedef Handle SC_ThrHandle;


/* ========================================================================== */
/*                          数据结构定义区                                    */
/* ========================================================================== */

/* 创建线程参数*/
typedef struct
{
    int32_t (*pThread)(Ptr pUsrArgs); /* 线程运行函数 */

    uint16_t thrPolicy;      /* 调度策略，其定义见SC_thrSchedPolicy */
    uint16_t thrPriority;    /* 调度优先级 */

    /*栈大小，SC_THR_STACK_SIZE_DEFAULT表示默认栈大小*/
    uint32_t stackSize;
    Ptr    pUsrArgs;    	 /* 用户自定义参数 */

    uint32_t reserved[4];
} SC_ThreadParam;

typedef struct
{
    pthread_t thread;

    uint32_t  thrPol;    /*调度策略，其定义见SC_thrSchedPolicy*/
	uint32_t  thrPri;	 /*线程优先级*/

}SC_ThreadObj;

/*******************************************************************************
* 函数名  : SC_thrCreate
* 描  述  : 创建线程。
* 输  入  : - pCreate: 创建参数。
*           - phThr  : 返回的句柄。
* 输  出  : 无。
* 返回值  : SC_SUC  : 成功。
*           SC_FAIL: 失败。
*******************************************************************************/
int32_t SC_threadCreate(SC_ThreadParam *pThreadParam, SC_ThrHandle *hThrHandle);


/*******************************************************************************
* 函数名  : SC_thrDelete
* 描  述  : 删除线程。
* 输  入  : - hThr: 线程句柄。
* 输  出  : 无。
* 返回值  : SC_SUC  : 成功。
*           SC_FAIL: 失败。
*******************************************************************************/
int32_t SC_threadDelete(SC_ThrHandle hThrHandle);


/*******************************************************************************
* 函数名  : SC_thrDelete
* 描  述  : 删除线程。
* 输  入  : - hThr: 线程句柄。
* 输  出  : 无。
* 返回值  : SC_SUC  : 成功。
*           SC_FAIL: 失败。
*******************************************************************************/
int32_t SC_threadJoin(SC_ThrHandle hThrHandle);


/*******************************************************************************
* 函数名  : SC_thrChangePri
* 描  述  : 修改线程优先级。
* 输  入  : - hThr  : 线程句柄。
            - thrPri: 线程优先级。
* 输  出  : 无。
* 返回值  : SC_SUC  : 成功。
*           SC_FAIL: 失败。
*******************************************************************************/
int32_t SC_threadChangePri(SC_ThrHandle hThrHandle, uint32_t thrPri);


/*******************************************************************************
* 函数名  : SC_threadGetMaxPri
* 描  述  : 获取最大优先级值。
* 输  入  : - thrPol: 线程调度策略，其定义见SC_thrSchedPolicy。
* 输  出  : 无。
* 返回值  : SC_SUC  : 成功。
*           SC_FAIL: 失败。
*******************************************************************************/
int32_t SC_threadGetMaxPri(uint32_t thrPol);

/*******************************************************************************
* 函数名  : SC_thrGetMinPri
* 描  述  : 获取最小优先级值。
* 输  入  : - thrPol: 线程调度策略，其定义见SC_thrSchedPolicy。
* 输  出  : 无。
* 返回值  : SC_SUC  : 成功。
*           SC_FAIL: 失败。
*******************************************************************************/
int32_t SC_threadGetMinPri(uint32_t thrPol);


/*******************************************************************************
* 函数名  : SC_thrExit
* 描  述  : 主动退出线程。
* 输  入  : - pRetVal: 退出后返回的值。
* 输  出  : 无。
* 返回值  : SC_SUC  : 成功。
*           SC_FAIL: 失败。
*******************************************************************************/
int32_t SC_threadExit(Ptr pRetVal);


/*******************************************************************************
* 函数名  : SC_thrGetTid
* 描  述  : 获取线程号。
* 输  入  : 无。
* 输  出  : 无。
* 返回值  : 线程号。
*******************************************************************************/
int32_t SC_threadGetTid(void);


/*******************************************************************************
* 函数名  : SC_thrGetPid
* 描  述  : 获取进程号。
* 输  入  : 无。
* 输  出  : 无。
* 返回值  : 进程号。
*******************************************************************************/
int32_t SC_threadGetPid(void);

/*******************************************************************************
* 函数名  : SC_thrGetName
* 描  述  : 获取进程名称, 仅内核态下有效，用户态下返回NULL。
* 输  入  : 无。
* 输  出  : 无。
* 返回值  : 进程名字。
*******************************************************************************/
char *SC_threadGetName(void);

/* 最大优先级值 */
#define SC_THR_PRI_MAX(thrPol)    SC_threadGetMaxPri(thrPol)

/* 最小优先级值 */
#define SC_THR_PRI_MIN(thrPol)    SC_threadGetMinPri(thrPol)

/* 默认先级值，为中间值。*/
#define SC_THR_PRI_DEFAULT(thrPol)         \
                (SC_THR_PRI_MIN(thrPol) + \
                (SC_THR_PRI_MAX(thrPol)   \
                    - SC_THR_PRI_MIN(thrPol)) / 2)


#ifdef __cplusplus
}
#endif


#endif
